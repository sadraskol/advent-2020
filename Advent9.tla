------------------------------ MODULE Advent9 ------------------------------
EXTENDS Sequences, Naturals, FiniteSetsExt, TLC

Input == <<
3,
48,
30,
21,
18,
50,
9,
37,
5,
31,
17,
39,
14,
45,
27,
23,
2,
4,
19,
35,
10,
32,
33,
28,
7,
34,
11,
6,
8,
12,
54,
13,
9,
15,
16,
60,
64,
17,
14,
18,
20,
23,
24,
25,
19,
21,
26,
22,
27,
46,
28,
29,
30,
31,
32,
38,
33,
37,
45,
63,
34,
35,
39,
51,
40,
41,
43,
60,
44,
47,
52,
58,
62,
55,
57,
59,
61,
64,
100,
65,
95,
73,
71,
69,
103,
74,
82,
83,
108,
147,
160,
87,
117,
91,
112,
107,
176,
114,
116,
148,
120,
125,
133,
190,
134,
152,
205,
183,
156,
216,
199,
202,
174,
211,
219,
194,
178,
198,
203,
223,
221,
354,
418,
236,
258,
323,
259,
267,
286,
469,
308,
489,
330,
439,
372,
368,
392,
527,
401,
611,
414,
521,
419,
424,
444,
457,
793,
494,
495,
594,
609,
702,
553,
722,
700,
638,
698,
773,
740,
895,
1130,
815,
951,
833,
838,
843,
868,
1535,
1239,
1282,
952,
1578,
1398,
1794,
2496,
1725,
1360,
1293,
1336,
1378,
1671,
1438,
1513,
1635,
2895,
1648,
1653,
1681,
2203,
2491,
1711,
2671,
2191,
2617,
2234,
2245,
2776,
2629,
2653,
4306,
2731,
2774,
2714,
2816,
5288,
2951,
3073,
3148,
4139,
3301,
5492,
4282,
5847,
8038,
3902,
3945,
5264,
8578,
8412,
4479,
4874,
5592,
5505,
5367,
5445,
5488,
5530,
5665,
5767,
6449,
8789,
7203,
7093,
9967,
7246,
14243,
13050,
8424,
12691,
9433,
9450,
9353,
10144,
15649,
12734,
10241,
10812,
10855,
13954,
14234,
11432,
14191,
17097,
12216,
14873,
14296,
15517,
26882,
15670,
23596,
17777,
24440,
17857,
18786,
39113,
18803,
19497,
23028,
21053,
21096,
21667,
22287,
23071,
41164,
35634,
23648,
26407,
26512,
27089,
40885,
29813,
48756,
45298,
36766,
36563,
36580,
40470,
41784,
40550,
38300,
44124,
40593,
70698,
84717,
43383,
43954,
67195,
64198,
50055,
85689,
60228,
63173,
53601,
83933,
87082,
77236,
73143,
73329,
73346,
78347,
77130,
78850,
110283,
78893,
82254,
83976,
114652,
110578,
93438,
87337,
117250,
103656,
113228,
113829,
116774,
123401,
126744,
126930,
150273,
146472,
183721,
151490,
146675,
150476,
180786,
189176,
263449,
201166,
210212,
187632,
297560,
197094,
190993,
180775,
339652,
230002,
216884,
277017,
230603,
273877,
376808,
273216,
273402,
293147,
296948,
367360,
297151,
327450,
474568,
361561,
368407,
371768,
377869,
378625,
490761,
388087,
411378,
397659,
503819,
446886,
447487,
490100,
504005,
720703,
571028,
671772,
546618,
566549,
590095,
594099,
624601,
658712,
689011,
729968,
733329,
740175,
1030480,
756494,
766712,
785746,
799465,
809037,
1135897,
894373,
936986,
1218700,
1246594,
1050623,
1140717,
1471237,
1113167,
1171219,
1156644,
1313612,
2055631,
1763809,
1347723,
1418979,
1463297,
1523206,
2187124,
1661085,
1542240,
1552458,
1722732,
1703410,
2186520,
2007540,
2679850,
2698884,
2163790,
2893951,
2191340,
2253884,
2269811,
2284386,
2327863,
2470256,
2766702,
3070455,
2811020,
2870929,
4890224,
2986503,
3203325,
3094698,
3213543,
3275190,
5837157,
3426142,
3710950,
5364207,
4335403,
5753205,
5569813,
4355130,
5704971,
8664511,
5198792,
8564225,
4612249,
9131113,
5236958,
5577722,
8450501,
12090653,
5857432,
17695338,
17454860,
6416868,
9003864,
8690533,
6701332,
7137092,
7761545,
8947652,
8967379,
9534195,
9553922,
9592088,
26385871,
13618977,
13687459,
12994524,
14141947,
9849207,
10814680,
18299708,
15449520,
18042589,
12274300,
12558764,
17353633,
18559467,
13118200,
26681983,
27136471,
13838424,
14898637,
16709197,
22548446,
40823930,
19383402,
19146010,
19441295,
34282039,
24747844,
32158717,
22843731,
20663887,
55722567,
23088980,
24833064,
26112724,
29912397,
36794928,
25676964,
30471833,
36386870,
26956624,
51285507,
39552928,
28737061,
53723334,
38529412,
58935316,
41989741,
38587305,
39809897,
43752867,
45411731,
43507618,
45496951,
45932711,
47620511,
47922044,
48765944,
50510028,
54414025,
52633588,
55693685,
70709491,
57428457,
67324366,
84462123,
82094923,
83317515,
123343079,
89610252,
85306848,
78397202,
80577046,
85742608,
83562764,
88919349,
128907230,
89440329,
91429662,
94698655,
98130539,
100555632,
143854354,
165454905,
178707585,
108327273,
113122142,
186724475,
299846617,
145721568,
158974248,
160492125,
237151230,
174917100,
326591559,
164139810,
170017375,
166319654,
169305372,
221449415,
178359678,
233294683,
180869991,
329594715,
192829194,
241984893,
208882905,
479136123,
254048841,
387242583,
258843710,
687089200,
339844239,
373022715,
356969004,
319466373,
324631935,
375202559,
330459464,
333445182,
350175363,
335625026,
362134566,
809595587,
373699185,
359229669,
500336364,
510464706,
434814087,
450867798,
462931746,
467726615,
615812714,
584508305,
1006555573,
692594030,
693165558,
644098308,
658077117,
649925837,
829931079,
694854695,
978191321,
663904646,
1066293215,
709405032,
697759592,
869694375,
732928854,
1117652452,
943737974,
1132573679,
961332504,
885681885,
913799544,
930658361,
1488008196,
1200321019,
1293913337,
1294024145,
1302175425,
1341857900,
1308002954,
1313830483,
1344780532,
1625237150,
1358759341,
1407164624,
1361664238,
1827057484,
1430688446,
1567453967
>>


Example == <<
35,
20,
15,
25,
47,
40,
62,
55,
65,
95,
102,
117,
150,
182
>>

Range(seq) == {seq[i]: i \in DOMAIN seq}


---- \* Part 1: TLA can't handle large numbers, so you have to do it with some other language  
(*
Check(input, i, offset) ==
    LET range == Range(SubSeq(input, i, i + offset - 1))
     IN {p \in range \X range: p[1] # p[2] /\ p[1] + p[2] = input[i + offset]} # {}
VARIABLE pc, current

Init == /\ pc = 1
        /\ current = Example[pc + 5]

Next == /\ pc' = pc + 1
        /\ Check(Example, pc, 5)
        /\ current' = Example[pc + 6]
*)
---- \* Part 2 : Same here, can't do much with the overflow of integer addition

VARIABLE size, searchRange, solution

CheckSum(candidate) == Sum(Range(candidate))

Goal == 1212510616
In == SelectSeq(Input, LAMBDA x: x < Goal)

\* Goal == 127
\* In == Example

Init == /\ size = 2
        /\ searchRange = << 1, Len(In) - 1 >>
        /\ solution = <<>>

Next == /\ solution = <<>>
        /\ \/ /\ searchRange[1] >= searchRange[2]
              /\ size' = size + 1
              /\ searchRange' = << 1, Len(In) - size >>
              /\ UNCHANGED solution
           \/ \E pc \in searchRange[1]..searchRange[2]:
              \/ /\ Sum(Range(SubSeq(In, pc, pc + size - 1))) < Goal
                 /\ searchRange' = << pc + 1, searchRange[2]>>
                 /\ UNCHANGED <<size, solution>>
              \/ /\ Sum(Range(SubSeq(In, pc, pc + size - 1))) > Goal
                 /\ searchRange' = << searchRange[1], pc - 1 >>
                 /\ UNCHANGED <<size, solution>>
              \/ /\ Sum(Range(SubSeq(In, pc, pc + size - 1))) = Goal
                 /\ solution' = SubSeq(In, pc, pc + size - 1)
                 /\ UNCHANGED <<size, searchRange>>

=============================================================================